<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">


	<!-- 스프링 시큐리티 동작을 위해서는 Authentication Manager와 스프링 시큐리티의 시작 지점이 필요하다 -->

	<!-- 에러 페이지 핸들러 빈으로 등록 -->
	<bean id="customAccessDenied"
		class="org.zerock.security.CustomAccessDeniedHandler"></bean>

	<!-- 커스텀 로그인 페이지 핸들러 빈으로 등록(스프링 시큐리티의 기본 구조 사용) -->
	<bean id="customLoginSuccess"
		class="org.zerock.security.CustomLoginSuccessHandler"></bean>

	<!-- 커스텀 패스워드 인코더를 빈으로 등록 -->
	<!-- <bean id="customPasswordEncoder" class="org.zerock.security.CustomNoOpPasswordEncoder"></bean> -->

	<!-- 기존 테이블을 사용하여 스프링 시큐리티 패스워드 인코딩(패스워드 인코더는 하나만 존재해야 함, 안 그러면 오류남) -->
	<bean id="bcryptPasswordEncoder"
		class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"></bean>

	<bean id="customUserDetailsService"
		class="org.zerock.security.CustomUserDetailsService"></bean>

	<security:http auto-config="true" use-expressions="true">

		<security:intercept-url pattern="/sample/all"
			access="permitAll" />
		<security:intercept-url
			pattern="/sample/member" access="hasRole('ROLE_MEMBER')" />
		<security:intercept-url pattern="/sample/admin"
			access="hasRole('ROLE_ADMIN')" />

		<!-- <security:form-login /> -->

		<!-- 커스텀 로그인 페이지 지정 -->
		<security:form-login login-page="/customLogin"
			authentication-success-handler-ref="customLoginSuccess" />

		<!-- 에러 페이지 지정 -->
		<!-- <security:access-denied-handler error-page="/accessError"/> -->

		<security:logout logout-url="/customLogout"
			invalidate-session="true" />


		<!-- AccessDeniedHandler 인터페이스 직접 구현 -->
		<security:access-denied-handler
			ref="customAccessDenied" />

		<!-- 자동 로그인 -->
		<security:remember-me
			data-source-ref="dataSource" token-validity-seconds="604800" />

	</security:http>

	<!-- <security:authentication-manager> member라는 계정 정보를 가진 사용자가 로그인을 할 수 
		있도록 설정 <security:authentication-provider> <security:user-service> 패스워드 인코딩 
		처리 없이 쓰려면 패스워드 앞에 {noop} 추가 <security:user name="member" password="{noop}member" 
		authorities="ROLE_MEMBER" /> <security:user name="admin" password="{noop}admin" 
		authorities="ROLE_MEMBER, ROLE_ADMIN" /> </security:user-service> </security:authentication-provider> 
		</security:authentication-manager> -->

	<security:authentication-manager>
		<security:authentication-provider
			user-service-ref="customUserDetailsService">

			<!-- 지정된 방식 이용 -->
			<!-- <security:jdbc-user-service data-source-ref="dataSource" /> -->

			<!-- 기존 테이블 이용 -->
			<!-- <security:jdbc-user-service data-source-ref="dataSource" users-by-username-query="select 
				userid, userpw, enabled from tbl_member where userid=?" authorities-by-username-query="select 
				userid, auth from tbl_member_auth where userid=?" /> -->

			<!-- <security:password-encoder ref="customPasswordEncoder" /> -->

			<security:password-encoder
				ref="bcryptPasswordEncoder" />

		</security:authentication-provider>
	</security:authentication-manager>

</beans>
